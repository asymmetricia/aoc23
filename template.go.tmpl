package main

import (
	"bytes"
	"strings"
	"unicode"

	"github.com/sirupsen/logrus"

	"github.com/asymmetricia/aoc23/aoc"
)

var log = logrus.StandardLogger()

func solutionA(name string, input []byte) int {
	// trim trailing space only
	input = bytes.Replace(input, []byte("\r"), []byte(""), -1)
	input = bytes.TrimRightFunc(input, unicode.IsSpace)
	lines := strings.Split(strings.TrimRightFunc(string(input), unicode.IsSpace), "\n")
	uniq := map[string]bool{}
	for _, line := range lines {
		uniq[line] = true
	}
	log.Printf("read %d %s lines (%d unique)", len(lines), name, len(uniq))

	//for _, line := range lines {
	//	//fields := strings.Fields(line)
	//}

	return -1
}

func solutionB(name string, input []byte) int {
	// trim trailing space only
	input = bytes.Replace(input, []byte("\r"), []byte(""), -1)
	input = bytes.TrimRightFunc(input, unicode.IsSpace)
	
  // lines := strings.Split(strings.TrimRightFunc(string(input), unicode.IsSpace), "\n")
	//for _, line := range lines {
	//	//fields := strings.Fields(line)
	//}

	return -1
}

func main() {
	log.SetFormatter(&logrus.TextFormatter{
		FullTimestamp:   true,
		TimestampFormat: "2006-01-02T15:04:05",
	})

	input := aoc.Input(__YEAR__, __DAY__)
	log.Printf("input solution A: %d", solutionA("input", input))
	log.Printf("input solution B: %d", solutionB("input", input))
}
